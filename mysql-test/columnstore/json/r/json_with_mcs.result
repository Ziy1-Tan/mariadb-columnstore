DROP DATABASE IF EXISTS json_with_mcs_db;
CREATE DATABASE json_with_mcs_db;
USE json_with_mcs_db;
# ----------------------------------------------------------------------
# Test of JSON_VALID function.
# ----------------------------------------------------------------------

# String literal - valid JSON
create table t1(a longtext) engine=columnstore;
insert into t1 values(NULL);
select JSON_VALID('123') from t1;
JSON_VALID('123')
1
select JSON_VALID('-123') from t1;
JSON_VALID('-123')
1
select JSON_VALID('5000000000') from t1;
JSON_VALID('5000000000')
1
select JSON_VALID('-5000000000') from t1;
JSON_VALID('-5000000000')
1
select JSON_VALID('1.23') from t1;
JSON_VALID('1.23')
1
select JSON_VALID('"123"') from t1;
JSON_VALID('"123"')
1
select JSON_VALID('true') from t1;
JSON_VALID('true')
1
select JSON_VALID('false') from t1;
JSON_VALID('false')
1
select JSON_VALID('null') from t1;
JSON_VALID('null')
1
select JSON_VALID('{"address": "Trondheim"}') from t1;
JSON_VALID('{"address": "Trondheim"}')
1

# String literal - valid JSON
select JSON_VALID('12 3'),a from t1;
JSON_VALID('12 3')	a
0	NULL

# String literal not in UTF-8
set names 'ascii';
select JSON_VALID("123") from t1;
JSON_VALID("123")
1
set names 'utf8';

# Bare NULL
select JSON_VALID(NULL) from t1;
JSON_VALID(NULL)
NULL

# Function result - string
select JSON_VALID( UPPER('"abc"') ) from t1;
JSON_VALID( UPPER('"abc"') )
1

# Function result - string
set names 'latin1';
select JSON_VALID(UPPER('"abc"')) from t1;
JSON_VALID(UPPER('"abc"'))
1
set names 'utf8';

# Function result - date, not valid as JSON without CAST
select JSON_VALID( CAST('2015-01-15' AS DATE) ) from t1;
JSON_VALID( CAST('2015-01-15' AS DATE) )
0

# The date string doesn't parse as JSON text, so wrong:
select JSON_VALID( CAST(CAST('2015-01-15' AS DATE) as CHAR CHARACTER SET 'utf8') );
JSON_VALID( CAST(CAST('2015-01-15' AS DATE) as CHAR CHARACTER SET 'utf8') )
0

# Function result - NULL
select JSON_VALID( UPPER(NULL) ) from t1;
JSON_VALID( UPPER(NULL) )
NULL
select JSON_VALID( UPPER(CAST(NULL as CHAR)) ) from t1;
JSON_VALID( UPPER(CAST(NULL as CHAR)) )
NULL
select JSON_VALID( '{ "firstName" : "Fred", "lastName" : "Flintstone" }' ) from t1;
JSON_VALID( '{ "firstName" : "Fred", "lastName" : "Flintstone" }' )
1
select JSON_VALID( '3' ) from t1;
JSON_VALID( '3' )
1
select JSON_VALID( null ) from t1;
JSON_VALID( null )
NULL
# ----------------------------------------------------------------------
# Test of JSON_DEPTH function.
# ----------------------------------------------------------------------
select JSON_DEPTH(null) from t1;
JSON_DEPTH(null)
NULL
select JSON_DEPTH
(
'{}'
) from t1;
JSON_DEPTH
(
'{}'
)
1
select JSON_DEPTH
(
'[]'
) from t1;
JSON_DEPTH
(
'[]'
)
1
select JSON_DEPTH( '"abc"' ) from t1;
JSON_DEPTH( '"abc"' )
1
error ER_INVALID_TYPE_FOR_JSON
select JSON_DEPTH( 1 ) from t1;
JSON_DEPTH( 1 )
1
error ER_INVALID_JSON_TEXT_IN_PARAM
select JSON_DEPTH( 'abc' ) from t1;
JSON_DEPTH( 'abc' )
0
Warnings:
Warning	4038	Syntax error in JSON text in argument 1 to function 'json_depth' at position 1
select JSON_DEPTH
(
'{ "a" : true, "b" : false, "c" : null }'
) from t1;
JSON_DEPTH
(
'{ "a" : true, "b" : false, "c" : null }'
)
2
select JSON_DEPTH
(
'[ "a", true, "b" , false, "c" , null ]'
) from t1;
JSON_DEPTH
(
'[ "a", true, "b" , false, "c" , null ]'
)
2
select JSON_DEPTH
(
'{ "a" : true, "b" : {}, "c" : null }'
) from t1;
JSON_DEPTH
(
'{ "a" : true, "b" : {}, "c" : null }'
)
2
select JSON_DEPTH
(
'[ "a", true, "b" , {}, "c" , null ]'
) from t1;
JSON_DEPTH
(
'[ "a", true, "b" , {}, "c" , null ]'
)
2
select JSON_DEPTH
(
'{ "a" : true, "b" : { "e" : false }, "c" : null }'
) from t1;
JSON_DEPTH
(
'{ "a" : true, "b" : { "e" : false }, "c" : null }'
)
3
select JSON_DEPTH
(
'[ "a", true, "b" , { "e" : false }, "c" , null ]'
) from t1;
JSON_DEPTH
(
'[ "a", true, "b" , { "e" : false }, "c" , null ]'
)
3
error ER_INVALID_JSON_TEXT_IN_PARAM
select JSON_DEPTH
(
'[ "a", true, "b" , { "e" : false }, "c" , null'
) from t1;
JSON_DEPTH
(
'[ "a", true, "b" , { "e" : false }, "c" , null'
)
0
Warnings:
Warning	4037	Unexpected end of JSON text in argument 1 to function 'json_depth'
# ----------------------------------------------------------------------
# Test of JSON_DEPTH function.
# ----------------------------------------------------------------------
select JSON_EQUALS('{"a":1,"b":2}','{"a":1,"b":2}') from t1;
JSON_EQUALS('{"a":1,"b":2}','{"a":1,"b":2}')
1
select JSON_EQUALS('{"a":1,"b":2}','{"b":2,"a":1}') from t1;
JSON_EQUALS('{"a":1,"b":2}','{"b":2,"a":1}')
1
select JSON_EQUALS('{"a":1,"b":2}','{"a":  1,"b":  2}') from t1;
JSON_EQUALS('{"a":1,"b":2}','{"a":  1,"b":  2}')
1
select JSON_EQUALS('{"a":    1,"b":2}','{"b":2,"a":1}') from t1;
JSON_EQUALS('{"a":    1,"b":2}','{"b":2,"a":1}')
1
select JSON_EQUALS('[1,2]','[1,2]') from t1;
JSON_EQUALS('[1,2]','[1,2]')
1
select JSON_EQUALS('[1,2]','[1   ,  2]') from t1;
JSON_EQUALS('[1,2]','[1   ,  2]')
1
select JSON_EQUALS(1,1) from t1;
JSON_EQUALS(1,1)
1
select JSON_EQUALS('{"a":1,"b":3}','{"a":1,"b":2}') from t1;
JSON_EQUALS('{"a":1,"b":3}','{"a":1,"b":2}')
0
select JSON_EQUALS('[1,2]','[2,1]') from t1;
JSON_EQUALS('[1,2]','[2,1]')
0
select JSON_EQUALS(1,2) from t1;
JSON_EQUALS(1,2)
0
select JSON_EQUALS('["a",true,{"e":false},null','["a",true,{"e":false},null') from t1;
JSON_EQUALS('["a",true,{"e":false},null','["a",true,{"e":false},null')
NULL
select JSON_EQUALS('s1',"s1") from t1;
JSON_EQUALS('s1',"s1")
NULL
# ----------------------------------------------------------------------
# Test of JSON_DEPTH function.
# ----------------------------------------------------------------------
select JSON_TYPE("{}") from t1;
JSON_TYPE("{}")
OBJE
DROP TABLE t1;
DROP DATABASE json_with_mcs_db;
